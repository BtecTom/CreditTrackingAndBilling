// <auto-generated />
using System;
using DataBaseAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataBaseAccess.Migrations
{
    [DbContext(typeof(CreditTrackingDbContext))]
    [Migration("20240418165443_rename")]
    partial class rename
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataBaseAccess.Models.Organisation", b =>
                {
                    b.Property<Guid>("OrganisationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreditsPerUser")
                        .HasColumnType("int");

                    b.Property<int>("CreditsUsed")
                        .HasColumnType("int");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("TimeOfLastReportRan")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TimeOfLastTopUp")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TopUpCredis")
                        .HasColumnType("int");

                    b.HasKey("OrganisationId");

                    b.HasIndex("PlanId");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("DataBaseAccess.Models.Plan", b =>
                {
                    b.Property<Guid>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlanId");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("DataBaseAccess.Models.ReportRequest", b =>
                {
                    b.Property<Guid>("ReportRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReportId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ReportSuccessfull")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RequestTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReportRequestId");

                    b.HasIndex("UserId");

                    b.ToTable("ReportRequests");
                });

            modelBuilder.Entity("DataBaseAccess.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CreditsUsed")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<DateTime?>("TimeOfLastReportRan")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DataBaseAccess.Models.OrganisationalUser", b =>
                {
                    b.HasBaseType("DataBaseAccess.Models.User");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("OrganisationId");

                    b.HasDiscriminator().HasValue("OrganisationalUser");
                });

            modelBuilder.Entity("DataBaseAccess.Models.TrialUser", b =>
                {
                    b.HasBaseType("DataBaseAccess.Models.User");

                    b.Property<DateTime>("FirstReportRanDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TrialCompleted")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("TrialUser");
                });

            modelBuilder.Entity("DataBaseAccess.Models.Organisation", b =>
                {
                    b.HasOne("DataBaseAccess.Models.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("DataBaseAccess.Models.ReportRequest", b =>
                {
                    b.HasOne("DataBaseAccess.Models.User", "User")
                        .WithMany("ReportRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataBaseAccess.Models.OrganisationalUser", b =>
                {
                    b.HasOne("DataBaseAccess.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("DataBaseAccess.Models.User", b =>
                {
                    b.Navigation("ReportRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
